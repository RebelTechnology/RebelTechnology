
-----------------------------------------------

Genius
MIDI interface with FM, AM, operators, envelopes and LFOs

LFOs:
 - rate
 - waveshape

Envelopes:
 - A/D/S/R
 - curve
 - trigger

FM functions:
- algorithm? or allow any cross modulation?

Operators:
- ratio semitones
- offset
- detune
- FM amount per destination (one being external L and R)

Destinations:
 - Pitch  / L out
 - Amplitude / R out
 - DAC outputs, CV A / B
 - trigger outputs TR A / B
 - operator amount
 - operator pitch
 - lfo rate

Default mono midi mapping:
 Trigger out A: gate
 Trigger out B: trigger, clock?
 CV out A: CC1
 CV out B: CC2? Aftertouch?
 L out: pitch (note + pb)
 R out: amplitude (velocity*sensitivity*volume)

Duophonic mapping:
 Trigger out A / B: gate
 CV out A / B: velocity
 Audio out L / R: pitch
 
settings:
- pitch bend range
- base note / transpose
- velocity sensitivity
- velocity curve

- clock: internal / external
- clock tempo
- clock start/stop

- pitch input: ignore pitch bend or threshold
- midi output max message rate (for inputs)

-----------------------------------------------

Other functions:
 - CV recorder and playback
 - audio interface
 - scope, signal monitor
 - signal generator
 - Sample player
 - Recorder
 - Tuner
 
-----------------------------------------------

Digital Bus: RX on pin 1, TX on pin 3

todo: interrupt on IDLE (triggered when period of one byte with no data).

baud rate auto detect (with 0x7f or 0x55)

(microcontroller mode: bus with master and many slaves, sleep until address comes up)

LIN local area interconnect mode: bus with master and many slaves, single wire
LIN may be used also over the vehicle's battery power-line with a special LIN over DC powerline (DC-LIN) transceiver
LIN is a broadcast serial network comprising 16 nodes (one master and typically up to 15 slaves)

http://www.st.com/content/ccc/resource/technical/document/application_note/10/30/18/b5/90/bc/4c/73/CD00004273.pdf/files/CD00004273.pdf/jcr:content/translations/en.CD00004273.pdf

-----------------------------------------------

Digital Bus todo: DMA USART with IDLE flush
https://stm32f4-discovery.net/2017/07/stm32-tutorial-efficiently-receive-uart-data-using-dma/
https://community.st.com/thread/42689-efficiently-use-dma-with-uart-rx-on-stm32
https://community.st.com/thread/41068-cubemx-feature-request-add-usart-rx-idle-handling#comments

configure 64-byte circular buffer with TC, HC and IDLE interrupts.
 __HAL_UART_ENABLE_IT(&huart1,UART_IT_IDLE);

on TC / HC set flag to process 32/4 frames
on IDLE, set flag to process transfered/4 frames

void USART1_IRQHandler(void)
{
 /* USER CODE BEGIN USART1_IRQn 0 */
 int16_t length = 0;

// Receive time-out interrupt
 if (__HAL_UART_GET_FLAG(&huart1, UART_FLAG_IDLE) == SET) {
 __HAL_UART_CLEAR_IDLEFLAG(&huart1);

 cyp_cmd_tail = cyp_cmd_head;
 cyp_cmd_head = huart1.RxXferSize -(uint16_t)huart1.hdmarx->Instance->CNDTR;
 if(cyp_cmd_tail >= cyp_cmd_head) { //Wrapped around circular buffer
   length = (cyp_cmd_head + CYP_BUFF_LENGTH) - cyp_cmd_tail;
 } else {
   length = cyp_cmd_head - cyp_cmd_tail;
 }

}

-----------------------------------------------

SPI2 OLED
prescaler 8
NSSPMode = SPI_NSS_PULSE_DISABLED

SSD1309

usb device
midi_rx_usb_buffer / midi_tx_usb_buffer

usb host
__weak void USBH_MIDI_ReceiveCallback(USBH_HandleTypeDef *phost)
__weak void USBH_MIDI_TransmitCallback(USBH_HandleTypeDef *phost)

USB HOST
PC9  PWR_EN
PA10 PWR_FAULT (EXTI conflict with TR_IN_B on PC10)

-----------------------------------------------

todo:
- remove top JP13 connecting USB_D_VBUS (always connected)
- remove D2 / D5? what are they for? Replace with BAT54?
- add USBH VBUS cap 100uF
- change to F4 chip (same as OWL2)
- change to TO220 LM7805 vreg
/ change to JST PH digital bus / usart
- N25Q128A13 replacement or remove
- hw pull-down on power enable

- make din-MIDI expansion

Genius todo:
/ add USB protection: USBLC6-2

-----------------------------------------------

SOUL patches
make PATCHSOURCE=~/devel/SOUL/examples/patches/clarinetMIDI/ SOUL=clarinetMIDI SOULCLASS=clarinetMIDI_poly
Err 04 Memory overflow

make PATCHSOURCE=~/devel/SOUL/examples/patches/DiodeClipper SOUL=DiodeClipper SOULCLASS=Diode
crashes

make PATCHSOURCE=~/devel/SOUL/examples/patches/Reverb SOUL=Reverb
works: 26%

SineSynth
works: 17%

PadSynth
crashes

ClassicRingtone
works: 2%

LatelyBass works
make PATCHSOURCE=~/devel/SOUL/examples/patches/TX/ElectroPiano SOUL=ElectroPiano SOULCLASS=ElectoPiano
works
make PATCHSOURCE=~/devel/SOUL/examples/patches/TX/ElecBass1 SOUL=ElecBass1 SOULCLASS=ElecBass
works

-----------------------------------------------
