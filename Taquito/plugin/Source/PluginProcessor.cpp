/*
  ==============================================================================

    This file was auto-generated by the Jucer!

    It contains the basic startup code for a Juce application.

  ==============================================================================
*/

#include "PluginProcessor.h"
#include "PluginEditor.h"


//==============================================================================
TaquitoAudioProcessor::TaquitoAudioProcessor()
{
  breath = 0.5;
  position = 0.5;
  pressure = 0.5;

  lastUIWidth = 400;
  lastUIHeight = 200;

  startTimer (50);
}

TaquitoAudioProcessor::~TaquitoAudioProcessor()
{
}

//==============================================================================
int TaquitoAudioProcessor::getNumParameters()
{
    return totalNumParams;
}

float TaquitoAudioProcessor::getParameter (int index)
{
  switch(index){
  case breathParam:     return breath;
  case positionParam:   return position;
  case pressureParam:   return pressure;
  default:              return 0.0f;
  }
}

void TaquitoAudioProcessor::setParameter (int index, float value)
{
  switch(index){
  case breathParam:     breath = value; break;
  case positionParam:   position = value; break;
  case pressureParam:   pressure = value; break;
  default:              break;
  }
}

const String TaquitoAudioProcessor::getParameterName (int index)
{
  switch(index){
  case breathParam:     return "breath";
  case positionParam:   return "position";
  case pressureParam:   return "pressure";
  default:            return String::empty;
  }

}

const String TaquitoAudioProcessor::getParameterText (int index)
{
    return String(getParameter(index), 2);
}

const String TaquitoAudioProcessor::getInputChannelName (int channelIndex) const
{
    return String (channelIndex + 1);
}

const String TaquitoAudioProcessor::getOutputChannelName (int channelIndex) const
{
    return String (channelIndex + 1);
}

bool TaquitoAudioProcessor::isInputChannelStereoPair (int index) const
{
    return true;
}

bool TaquitoAudioProcessor::isOutputChannelStereoPair (int index) const
{
    return true;
}

bool TaquitoAudioProcessor::acceptsMidi() const
{
#if JucePlugin_WantsMidiInput
    return true;
#else
    return false;
#endif
}

bool TaquitoAudioProcessor::producesMidi() const
{
#if JucePlugin_ProducesMidiOutput
    return true;
#else
    return false;
#endif
}

int TaquitoAudioProcessor::getNumPrograms()
{
    return 0;
}

int TaquitoAudioProcessor::getCurrentProgram()
{
    return 0;
}

void TaquitoAudioProcessor::setCurrentProgram (int index)
{
}

const String TaquitoAudioProcessor::getProgramName (int index)
{
    return String::empty;
}

void TaquitoAudioProcessor::changeProgramName (int index, const String& newName)
{
}

//==============================================================================
void TaquitoAudioProcessor::prepareToPlay (double sampleRate, int samplesPerBlock)
{
    // Use this method as the place to do any pre-playback
  taquito.connect();
  keyboardState.reset();
  // initialisation that you need..
}

void TaquitoAudioProcessor::releaseResources()
{
  // When playback stops, you can use this as an opportunity to free up any
  taquito.disconnect();
  keyboardState.reset();
  // spare memory, etc.
}

int8_t lastnote = -1;
int channel = 1;
int octave = 4;

void TaquitoAudioProcessor::processBlock (AudioSampleBuffer& buffer, MidiBuffer& midiMessages)
{
    const int numSamples = buffer.getNumSamples();
    for (int channel = 0; channel < getNumInputChannels(); ++channel)
    {
//         float* channelData = buffer.getSampleData (channel);
    }

    if(lastnote != -1){
      midiMessages.addEvent(MidiMessage::noteOff(channel, lastnote), 0);
      lastnote = -1;
    }
    if(taquito.getPressure() > 0.2){
      lastnote = taquito.getPosition()*25 + octave*12;
      midiMessages.addEvent(MidiMessage::noteOn(channel, lastnote, taquito.getPressure()), 1);
    }

    keyboardState.processNextMidiBuffer (midiMessages, 0, numSamples, true);

    // In case we have more outputs than inputs, we'll clear any output
    // channels that didn't contain input data, (because these aren't
    // guaranteed to be empty - they may contain garbage).
    for (int i = getNumInputChannels(); i < getNumOutputChannels(); ++i)
    {
        buffer.clear (i, 0, buffer.getNumSamples());
    }
}

void TaquitoAudioProcessor::timerCallback()
{
  taquito.read();
  setParameterNotifyingHost(TaquitoAudioProcessor::breathParam, taquito.getBreath());
  setParameterNotifyingHost(TaquitoAudioProcessor::positionParam, taquito.getPosition());
  setParameterNotifyingHost(TaquitoAudioProcessor::pressureParam, taquito.getPressure());
}

//==============================================================================
bool TaquitoAudioProcessor::hasEditor() const
{
    return true; // (change this to false if you choose to not supply an editor)
}

AudioProcessorEditor* TaquitoAudioProcessor::createEditor()
{
    return new TaquitoAudioProcessorEditor (this);
}

//==============================================================================
void TaquitoAudioProcessor::getStateInformation (MemoryBlock& destData)
{
    // You should use this method to store your parameters in the memory block.
    // You could do that either as raw data, or use the XML or ValueTree classes
    // as intermediaries to make it easy to save and load complex data.
}

void TaquitoAudioProcessor::setStateInformation (const void* data, int sizeInBytes)
{
    // You should use this method to restore your parameters from this memory block,
    // whose contents will have been created by the getStateInformation() call.
}

//==============================================================================
// This creates new instances of the plugin..
AudioProcessor* JUCE_CALLTYPE createPluginFilter()
{
    return new TaquitoAudioProcessor();
}
