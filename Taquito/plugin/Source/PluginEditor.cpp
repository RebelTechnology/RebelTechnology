/*
  ==============================================================================

    This file was auto-generated by the Jucer!

    It contains the basic startup code for a Juce application.

  ==============================================================================
*/

#include "PluginProcessor.h"
#include "PluginEditor.h"


//==============================================================================
TaquitoAudioProcessorEditor::TaquitoAudioProcessorEditor (TaquitoAudioProcessor* ownerFilter)
    : AudioProcessorEditor (ownerFilter),
      midiKeyboard (ownerFilter->keyboardState, MidiKeyboardComponent::horizontalKeyboard),
      infoLabel ("", "Taquito"),
      breathLabel ("", "Breath:"),
      positionLabel ("", "Position:"),
      pressureLabel ("", "Pressure:"),
      breathSlider ("breath"),
      positionSlider ("position"),
      pressureSlider ("pressure")
{
    // add some sliders..
    addAndMakeVisible (&breathSlider);
    breathSlider.setSliderStyle (Slider::Rotary);
    breathSlider.addListener (this);
    breathSlider.setRange (0.0, 1.0, 0.01);

    addAndMakeVisible (&positionSlider);
    positionSlider.setSliderStyle (Slider::Rotary);
    positionSlider.addListener (this);
    positionSlider.setRange (0.0, 1.0, 0.01);

    addAndMakeVisible (&pressureSlider);
    pressureSlider.setSliderStyle (Slider::Rotary);
    pressureSlider.addListener (this);
    pressureSlider.setRange (0.0, 1.0, 0.01);

    // add some labels for the sliders..
    breathLabel.attachToComponent (&breathSlider, false);
    breathLabel.setFont (Font (11.0f));

    positionLabel.attachToComponent (&positionSlider, false);
    positionLabel.setFont (Font (11.0f));

    pressureLabel.attachToComponent (&pressureSlider, false);
    pressureLabel.setFont (Font (11.0f));

    // add the midi keyboard component..
    addAndMakeVisible (&midiKeyboard);

    // add a label that will display the current timecode and status..
    addAndMakeVisible (&infoLabel);
    infoLabel.setColour (Label::textColourId, Colours::blue);

    // add the triangular resizer component for the bottom-right of the UI
    addAndMakeVisible (resizer = new ResizableCornerComponent (this, &resizeLimits));
    resizeLimits.setSizeLimits (150, 150, 800, 300);

    // set our component's initial size to be the last one that was stored in the filter's settings
    setSize (ownerFilter->lastUIWidth,
             ownerFilter->lastUIHeight);

    startTimer (50);
}

TaquitoAudioProcessorEditor::~TaquitoAudioProcessorEditor()
{
}

//==============================================================================
void TaquitoAudioProcessorEditor::paint (Graphics& g)
{
    g.setGradientFill (ColourGradient (Colours::white, 0, 0, Colours::grey, 0, (float) getHeight(), false));
    g.fillAll();
//     g.fillAll (Colours::white);
//     g.setColour (Colours::black);
//     g.setFont (15.0f);
//     g.drawFittedText ("Hello World!",
//                       0, 0, getWidth(), getHeight(),
//                       Justification::centred, 1);
}

void TaquitoAudioProcessorEditor::resized()
{
    infoLabel.setBounds (10, 4, 400, 25);
    breathSlider.setBounds (20, 60, 80, 40);
    positionSlider.setBounds (140, 60, 80, 40);
    pressureSlider.setBounds (260, 60, 80, 40);

    const int keyboardHeight = 70;
    midiKeyboard.setBounds (4, getHeight() - keyboardHeight - 4, getWidth() - 8, keyboardHeight);

    resizer->setBounds (getWidth() - 16, getHeight() - 16, 16, 16);

    getProcessor()->lastUIWidth = getWidth();
    getProcessor()->lastUIHeight = getHeight();
}

// This timer periodically checks whether any of the filter's parameters have changed...
void TaquitoAudioProcessorEditor::timerCallback()
{
    TaquitoAudioProcessor* ourProcessor = getProcessor();

//     AudioPlayHead::CurrentPositionInfo newPos (ourProcessor->lastPosInfo);

//     if (lastDisplayedPosition != newPos)
//         displayPositionInfo (newPos);

    breathSlider.setValue (ourProcessor->breath, false);
    positionSlider.setValue (ourProcessor->position, false);
    pressureSlider.setValue (ourProcessor->pressure, false);
}

// This is our Slider::Listener callback, when the user drags a slider.
void TaquitoAudioProcessorEditor::sliderValueChanged (Slider* slider)
{
    if (slider == &breathSlider)
    {
        // It's vital to use setParameterNotifyingHost to change any parameters that are automatable
        // by the host, rather than just modifying them directly, otherwise the host won't know
        // that they've changed.
      getProcessor()->setParameterNotifyingHost (TaquitoAudioProcessor::breathParam,
						 (float) breathSlider.getValue());
    }
    else if (slider == &positionSlider)
    {
      getProcessor()->setParameterNotifyingHost (TaquitoAudioProcessor::positionParam,
						 (float) positionSlider.getValue());
    }
    else if (slider == &pressureSlider)
    {
      getProcessor()->setParameterNotifyingHost (TaquitoAudioProcessor::pressureParam,
						 (float) pressureSlider.getValue());
    }
}
